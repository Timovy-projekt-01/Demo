<?php

namespace App\Ontologies\Malware;

use App\Exceptions\ScriptFailedException;
use App\Ontologies\Helpers\HttpService;
use App\Ontologies\Malware\Queries;
use App\Ontologies\Malware\ServiceInterface;

class Service implements InterfaceService
{
    private $sparql;
    public function __construct(Queries $sparql)
    {
        $this->sparql = $sparql;
    }

    public function updateMalware(Parser $parser, HttpService $httpService): string
    {
        return $httpService->postOwl($parser->parseMalware());
    }

    public function getCleanMalwareProperties($id): array
    {
        $malware = [];
        $properties = $this->sparql->getRawMalwareProperties($id);
        if ($this->isTechnique($properties)) {
            $relationNames = $this->sparql->getRelations($id, 'mitigates', 'usesTechnique');
            $relationNames = $this->mapTechniqueRelations($relationNames);
            $properties = array_merge($properties, $relationNames);
        }
        $malware = $this->mapExistingData($malware, $properties);
        $malware = $this->getNamesToIds($malware, ['usesTechnique', 'usesSoftware', 'mitigates']);

        return $malware;
    }
    public function isTechnique(array $result)
    {
        foreach ($result as $item) {
            $propertyValues = array_column($item, 'value', 'property');
            if (strcmp($propertyValues[1], "Technique") == 0) {
                return true; // Is technique
            }
        }
        return false; // Is not technique
    }

    public function mapExistingData(array $malware, array $properties): array {
        foreach ($properties as $prop) {
            $propertyName = $prop['property']['value'];
            $propertyValue = $prop['value']['value'];

            // Check if the property already exists in $malware
            if (array_key_exists($propertyName, $malware)) {
                // If it exists, append the value to the existing array
                $malware[$propertyName][] = $propertyValue;
            } else {
                // If it doesn't exist, create a new array with the value
                $malware[$propertyName] = [$propertyValue];
            }
        }
        // Map the values into an associative array except arrays with more than one element.
        $malware = array_map(function ($values) {
            return count($values) > 1 ? $values : $values[0] ?? null;
        }, $malware);
        return $malware;
    }

    public function getNamesToIds($malware, array $colapsProps): array
    {

        foreach ($colapsProps as $colapsProp) {
            if (isset($malware[$colapsProp])) {
                $entityIds = $malware[$colapsProp];

                $results = [];
                foreach (array_chunk((array) $entityIds, 100) as $chunk) {
                    $ids = implode(" ", array_map(function ($id) {
                        return "<http://stufei/ontologies/malware#{$id}>";
                    }, $chunk));

                    $chunkResult = $this->sparql->getNames($ids);
                    array_push($results, ...$chunkResult);
                }
                $names = [];
                foreach ($results as $result) {
                    $names[] = $result['name']['value'];
                }
                // Map those names to IDs
                $malware[$colapsProp] = array_map(function ($id, $name) {
                    return ['id' => $id, 'name' => $name];
                }, (array) $malware[$colapsProp], (array)$names);
            }
        }
        return $malware;
    }

    public function mapTechniqueRelations($relations) {
        foreach ($relations as $key => $relation) {
            $entityValue = $relation['entity']['value'];
            switch (substr($entityValue, 0, 1)) {
                case 'M':
                    $propertyVal = 'mitigates';
                    break;
                case 'T':
                    $propertyVal = 'usesTechnique';
                    break;
                case 'G':
                    $propertyVal = 'usedInTactic';
                    break;
                case 'S':
                    $propertyVal = 'usesSoftware';
                    break;
            }
            $relations[$key] = [
                "property" => ["type" => "uri", "value" => $propertyVal],
                "value" => ["type" => "uri", "value" => $entityValue],
            ];
        }
        return $relations;
    }
}

?>
