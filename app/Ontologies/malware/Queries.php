<?php

namespace App\Ontologies\Malware;

use App\Ontologies\Helpers\HttpService;
use Illuminate\Support\Facades\Cache;

class Queries
{
    private $httpService;

    public function __construct(HttpService $httpService)
    {
        $this->httpService = $httpService;
    }
    public function getName($entityId)
    {
        $query = 'SELECT ?name
                    WHERE {
                    <http://stufei/ontologies/malware#' . $entityId . '> <http://stufei/ontologies/malware#hasName> ?name .
                    }';
        $result = $this->httpService->get($query);
        $result = $result[0]['name']['value'];
        return $result;
    }
    /* public function getNames($entityIds)
    {
        $ids = implode(" ", array_map(function ($id) {
            return "<http://stufei/ontologies/malware#{$id}>";
        }, $entityIds));

        $query = "SELECT ?entity ?name
              WHERE {
                  VALUES ?entity { {$ids} }
                  ?entity <http://stufei/ontologies/malware#hasName> ?name .
              }";

        $results = $this->httpService->get($query);

        $names = [];
        foreach ($results as $result) {
            $names[] = $result['name']['value'];
        }

        return $names;
    } */
    public function searchEntities(string $searchTerm)
    {
        $query = 'SELECT ?entity ?property ?value
                    WHERE {
                    ?entity ?property ?value .
                    FILTER (regex(?value, "^' . $searchTerm . '", "i")) .
                    FILTER (?property IN (
                        <http://stufei/ontologies/malware#hasName>,
                        <http://stufei/ontologies/malware#name>,
                        <http://stufei/ontologies/malware#hasSubmitName>
                    )) .
                    }
                    LIMIT 3';
        $result = $this->httpService->get($query);
        $parsedData = $this->parseValues($result);

        return $parsedData;
    }

    public function getRawMalwareProperties($entityId)
    {
        $query = 'SELECT ?property ?value WHERE {
                    <http://stufei/ontologies/malware#' . $entityId . '> ?property ?value.
                    }';

        $response = $this->httpService->get($query);

        $result = $this->httpService->get($query);
        $parsedData = $this->parseValues($result);
        return $parsedData;
    }

    //Parses the returned array to extract the things after '#' in uri
    private function parseValues($rawData)
    {
        //dump($rawData);
        $parsedData = array_map(function ($item) {
            if (isset($item['entity']['value'])) {
                $item['entity']['value'] = $this->extractValue($item['entity']['value']);
            }
            if (isset($item['property']['value'])) {
                $item['property']['value'] = $this->extractValue($item['property']['value']);
            }
            if (isset($item['value']['value'])) {
                $item['value']['value'] = $this->extractValue($item['value']['value']);
            }
            return $item;
        }, $rawData);
        return $parsedData;
    }
    private function extractValue($uri, $charToFind = '#')
    {
        if ($uri && strpos($uri, $charToFind) !== false) {
            $hashtagIndex = strrpos($uri, $charToFind);
            return substr($uri, $hashtagIndex + 1);
        }
        return $uri; // Return the entire URI if the character is not found
    }
}
