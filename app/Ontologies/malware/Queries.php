<?php

namespace App\Ontologies\Malware;

use App\Ontologies\Helpers\HttpService;
use Illuminate\Support\Facades\Cache;

class Queries
{
    private $httpService;
    private $feiOntology = 'http://stufei/ontologies/malware#';
    public function __construct(HttpService $httpService)
    {
        $this->httpService = $httpService;
    }


    public function getRelations(string $techniqueId, string $relationType1, string $relationType2)
    {
        // Query to retrieve entities related to the given technique ID based on the two relation types
        $query = 'PREFIX malware: <' . $this->feiOntology . '>
                SELECT
                    (STRAFTER(STR(?entity), "#") AS ?entityLocal)
                WHERE {
                    {
                        ?entity malware:' . $relationType1 . ' ?id .
                        FILTER regex(str(?id), "' . $techniqueId . '")
                    }
                    UNION
                    {
                        ?entity malware:' . $relationType2 . ' ?id .
                        FILTER regex(str(?id), "' . $techniqueId . '")
                    }
                }';

        $result = $this->httpService->get($query);
        return $result;
    }

    public function getNames($entityIds): array
    {
        $query = 'PREFIX malware: <' . $this->feiOntology . '>
                SELECT
                    (STRAFTER(STR(?entity), "#") AS ?entityLocal)
                    ?name
                WHERE {
                    VALUES ?entity { ' . $entityIds . ' }
                    ?entity malware:hasName ?name .
                    }';

        $result = $this->httpService->get($query);
        return $result;
    }

    public function searchEntities(string $searchTerm)
    {
        $query = 'PREFIX malware: <' . $this->feiOntology . '>
                SELECT
                    (STRAFTER(STR(?entity), "#") AS ?entityLocal)
                    (STRAFTER(STR(?property), "#") AS ?propertyLocal)
                    (IF(CONTAINS(str(?value), "#"), STRAFTER(str(?value), "#"), str(?value)) AS ?valueLocal)
                WHERE {
                    ?entity ?property ?value .
                    FILTER (regex(?value, "^' . $searchTerm . '", "i")) .
                    FILTER (?property IN (
                    malware:hasName,
                    malware:name,
                    malware:hasSubmitName
                    )) .
                }
                LIMIT 3';

        $result = $this->httpService->get($query);
        return $result;
    }

    public function getRawMalwareProperties($entityId)
    {
        $query = 'PREFIX malware: <' . $this->feiOntology . '>
                SELECT
                    (STRAFTER(STR(?property), "#") AS ?propertyLocal)
                    (IF(CONTAINS(str(?value), "#"), STRAFTER(str(?value), "#"), str(?value)) AS ?valueLocal)
                WHERE {
                malware:' . $entityId . ' ?property ?value.
                }';

        $result = $this->httpService->get($query);
        return $result;
    }
}
